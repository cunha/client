# shellcheck shell=bash

peeringdir=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/.." && pwd -P)
export peeringdir
export varrun="$peeringdir/var"

export bird_exec="bird"
export birdc_exec="birdc"
export bird_sock="$varrun/bird.ctl"
export bird_cfgs="$peeringdir/configs/bird"
export bird_cfgfile="$bird_cfgs/bird.conf"
export bird_routes="$bird_cfgs/route-announcements"
export bird_filters="$bird_cfgs/prefix-filters"

export bird6_exec="bird6"
export birdc6_exec="birdc6"
export bird6_sock="$varrun/bird6.ctl"
export bird6_cfgs="$peeringdir/configs/bird"
export bird6_cfgfile="$bird6_cfgs/bird6.conf"
export bird6_routes="$bird6_cfgs/route-announcements"
export bird6_filters="$bird6_cfgs/prefix-filters"

export openvpn_cfgs="$peeringdir/configs/openvpn"

export tinyproxy_cfgs="$peeringdir/configs/tinyproxy"
export tinyproxy_template="$peeringdir/configs/tinyproxy/tinyproxy.conf.template"

export mux2dev_db="$varrun/mux2dev.txt"
export ctxid_db="$peeringdir/container.txt"
export prefix_db="$peeringdir/prefixes.txt"
export prefix6_db="$peeringdir/prefixes6.txt"
export appns_table_base=10000
export kernel_table=20000

load_mux2dev () {
    declare -gA mux2dev
    export mux2dev
    while read -r fmux fdev ; do
        mux2dev[$fmux]=$fdev
    done < "$mux2dev_db"
}

load_pfx2id () {
    if [ ! -e "$prefix_db" ] ; then
        echo "error: $prefix_db not found."
        echo "list the IPv4 prefixes you will announce in $prefix_db."
        die "create an empty file if you will not announce IPv4 prefixes."
    fi

    if [ ! -e "$prefix6_db" ] ; then
        echo "error: $prefix6_db not found."
        echo "list the IPv6 prefixes you will announce in $prefix6_db."
        die "create an empty file if you will not announce IPv6 prefixes."
    fi

    declare -gA pfx2id
    export pfx2id
    while read -r pfx ; do
        pfx2id[$pfx]=v4
    done < "$prefix_db"
    while read -r pfx ; do
        pfx2id[$pfx]=v6
    done < "$prefix6_db"
}

term () {
    echo "$1"
    exit 0
}

die () {
    echo "$1"
    exit 1
}

mkdir -p "$varrun"

export -f load_mux2dev
export -f load_pfx2id
export -f term
export -f die

if [ ! -s "$mux2dev_db" ] ; then
    echo "rebuilding $mux2dev_db"
    for fn in "$openvpn_cfgs"/*.conf ; do
        name=$(basename "$fn")
        name=${name%%.conf}
        echo -n "$name " >> "$mux2dev_db"
        grep -Ee "^dev " "$fn" | cut -d " " -f 2 >> "$mux2dev_db"
    done
fi

# vim: ft=sh
